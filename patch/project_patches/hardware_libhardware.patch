diff --git a/include/hardware/fb.h b/include/hardware/fb.h
index ba2f286..d39c136 100644
--- a/include/hardware/fb.h
+++ b/include/hardware/fb.h
@@ -64,7 +64,14 @@ typedef struct framebuffer_device_t {
     /* max swap interval supported by this framebuffer */
     const int       maxSwapInterval;
 
+#ifdef QCOM_HARDWARE
+    /* number of framebuffers */
+    const int       numFramebuffers;
+
+    int reserved[7];
+#else
     int reserved[8];
+#endif
 
     /*
      * requests a specific swap-interval (same definition than EGL)
@@ -126,6 +133,10 @@ typedef struct framebuffer_device_t {
 
     int (*compositionComplete)(struct framebuffer_device_t* dev);
 
+#ifdef QCOM_HARDWARE
+    int (*lockBuffer) (struct framebuffer_device_t* dev, int);
+#endif
+
     /*
      * This hook is OPTIONAL.
      *
@@ -141,7 +152,20 @@ typedef struct framebuffer_device_t {
      */
     int (*enableScreen)(struct framebuffer_device_t* dev, int enable);
 
+#ifdef QCOM_HARDWARE
+    int (*dequeueBuffer) (struct framebuffer_device_t* dev, int);
+
+    /*
+     * (*perform)() is used to inform custom event to fb device
+     * event - Type of event
+     * val1 - associated with event
+     * val2 - additional value(if any) associated with event
+     */
+    int (*perform) (struct framebuffer_device_t* dev, int event, int value);
+
+#else
     void* reserved_proc[6];
+#endif
 
 } framebuffer_device_t;
 
diff --git a/include/hardware/hwcomposer.h b/include/hardware/hwcomposer.h
index b4a7a7a..c428a09 100644
--- a/include/hardware/hwcomposer.h
+++ b/include/hardware/hwcomposer.h
@@ -66,7 +66,20 @@ enum {
      * SurfaceFlinger will only honor this flag when the layer has no blending
      *
      */
+#ifdef QCOM_HARDWARE
+    HWC_HINT_CLEAR_FB       = 0x00000002,
+
+    /*
+     * HWC sets the HWC_HINT_DRAW_S3D_SS or HWC_HINT_DRAW_S3D_TB to tell
+     * Surfaceflinger that currently a S3D video layer is being drawn so
+     * convert the other layers to S3D format of Video while composing
+     *
+     */
+    HWC_HINT_DRAW_S3D_SIDE_BY_SIDE    = 0x00000004,
+    HWC_HINT_DRAW_S3D_TOP_BOTTOM      = 0x00000008
+#else
     HWC_HINT_CLEAR_FB       = 0x00000002
+#endif
 };
 
 /*
@@ -160,6 +173,11 @@ typedef struct hwc_layer {
     /* blending to apply during composition */
     int32_t blending;
 
+#ifdef QCOM_HARDWARE
+    /* alpha value of the layer */
+    int32_t alpha;
+#endif
+
     /* area of the source to consider, the origin is the top-left corner of
      * the buffer */
     hwc_rect_t sourceCrop;
@@ -187,6 +205,13 @@ enum {
      * passed to (*prepare)() has changed by more than just the buffer handles.
      */
     HWC_GEOMETRY_CHANGED = 0x00000001,
+#ifdef QCOM_HARDWARE
+    /*
+     * HWC_SKIP_COMPOSITION is set by the HWC to indicate to SurfaceFlinger to
+     * skip composition for this iteration.
+     */
+    HWC_SKIP_COMPOSITION = 0x00000002
+#endif
 };
 
 /*
@@ -331,6 +356,14 @@ typedef struct hwc_composer_device {
 
     void* reserved_proc[6];
 
+#ifdef QCOM_HARDWARE
+    /*
+     * This API is called by Surfaceflinger to inform the HWC about the
+     * custom events(external display).
+     */
+    void (*perform)(struct hwc_composer_device* dev, int event, int value);
+#endif
+
 } hwc_composer_device_t;
 
 